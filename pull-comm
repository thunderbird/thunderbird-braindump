#!/bin/bash
# 2018 by Rob Lemley
# Works with a unified repository to pull mozilla- and matching comm- trees
# Assumes firefoxtree extension is installed
# Requires bash 4 (hey I could have used zsh!)
# Requires libbash http://sf.net/projects/libbash
#
# $1 is the comm tree you want.
# Supported trees: comm-central, comm-beta, comm-esr102, comm-esr115
#
# Limitations & other notes:
# - The shell's current directory must be $topsrcdir/comm where $topsrcdir is a gecko source tree. You must have run
#   `hg pull comm` and `hg pull central` in the respective directories at least once prior to running pull-comm for
#   the first time in a newly cloned source tree.
# - The pull will fail if either gecko or comm clones have uncommited changes. Either commit them or shelve them.
# - This script always assumes that if passed a given comm repo, that the corresponding gecko repo will be pulled with it
#   as set in ${REPOMAP}.
# - If GECKO_HEAD_REV is set in .gecko_rev.yml, the comm checkout will update to that revision. No attempt is made to sanity
#   check that GECKO_HEAD_REPOSITORY is what REPOMAP has said to pull. So this could fail!

set -E

START_DIR=$(pwd)

# Map comm repos to the appropriate mozilla repo
declare -A REPOMAP=( [comm]=central
                     [c-c]=central
                     [comm-beta]=beta
                     [c-b]=beta
                     [comm-release]=release
		                 [c-r]=release
                     [comm-esr102]=esr102
                     [comm-esr115]=esr115 
		                 [comm-esr128]=esr128 )


# Load libbash libraries
# shellcheck disable=SC2086
source_libjfxbash="source $(dirname $0)/libjfxbash"
${source_libjfxbash}

# Prefer chg over hg
export HG=$(which chg)
if [[ -z "$HG" ]]; then
  export HG=$(which hg)
fi
if [[ -z "$HG" ]]; then
  print_RED "Mercurial executable not found. Tried 'chg' and 'hg'"
  exit 1
fi

function check_ext() {
  # Verify firefoxtree extension
  FFT=$("${HG}" config extensions.firefoxtree)
  if [[ $? -eq 0 ]]; then
    print_GREEN "Firefoxtree extension found at $FFT"
  else
    print_RED "Firefoxtree extension not found"
    echo "See https://mozilla-version-control-tools.readthedocs.io/en/latest/hgmozilla/firefoxtree.html"
    exit 1
  fi
}

function check_status() {
  # Makes sure status of the repos is clean
  local R
  ( R=$("${HG}" id -T '{dirty}\n')
    if [[ -n "$R" ]]; then
      print_RED "Comm repository is dirty, hg update will not work"
      exit 1 # Exits the subshell, not the script
    fi ) &&
  ( R=$("${HG}" -R .. id -T '{dirty}\n')
    if [[ "$R" == "+" ]]; then
      print_RED "Mozilla repository is dirty, hg update will not work"
      exit 1 # Exits the subshell, not the script
    fi ) &&
  print_GREEN "Repositories are clean, hg update should work" ||
  exit 1
  
  return 0
}

function hg_pull() {
  local R="$1"
  local REPO="$2"
  local PREFIX="$3"

  { "${HG}" -R "${R}" pull "${REPO}"
    "${HG}" -R "${R}" update "${REPO}"
  } | prefix_output "${REPO}" "${PREFIX}"
}

function do_pull() {
  # Do the pulls and update.
  # Exit status is not checked or anything
  local COMM
  local MOZ
  get_upstream_repo MOZ
  if [[ "$MOZ" = "central" ]]; then
    COMM="comm"
  else
    COMM="comm-${MOZ}"
  fi
  print_BLUE "Using \"${COMM}\" for Comm repository."

  ( hg_pull .. "${MOZ}" "prefix_BLUE" ) &
  ( hg_pull . "${COMM}" "prefix_YELLOW" ) &
  wait
}

function do_upstream_rev() {
  # Reads upstream (gecko src) information from .gecko_rev.yml
  # Check for a GECKO_HEAD_REPOSITORY line
  grep -E '^GECKO_HEAD_REV: ' .gecko_rev.yml || { print_YELLOW "GECKO_HEAD_REV not found in .gecko_rev.yml. Updated to tip."; exit 0; }
  REV=$(grep -E '^GECKO_HEAD_REV: ' .gecko_rev.yml | sed -e 's/^GECKO_HEAD_REV: //')
  print_BLUE "Updating to ${REV}."
  "${HG}" up -R .. ${REV}
}

function get_upstream_repo() {
  declare -n ret=$1
  # Reads upstream (gecko) repo from .gecko_rev.yml
  local get_upstream_repo_ret=$(grep -E '^GECKO_HEAD_REPOSITORY: ' .gecko_rev.yml | sed -E 's%^GECKO_HEAD_REPOSITORY: https://hg-edge.mozilla.org/(releases/)?mozilla-%%')
  print_BLUE "Using \"${get_upstream_repo_ret}\" for Gecko repository."
  ret=${get_upstream_repo_ret}
}

find_comm() {
  declare -n ret=$1
  local find_comm_ret
  find_comm_ret=$( while [[ "$(pwd)" != "/" ]]; do 
    if [[ -d .hg ]]; then
      if [[ -f ../mach ]]; then
        pwd
        exit 0
      else
        echo "Found an .hg directory in $(pwd) but it's not a Thunderbird repo?"
        exit 8
      fi
    fi
    cd ..
  done
  echo "Current directory $(pwd) does not appear to be a Thunderbird HG repository."
  exit 6 )
  if [[ $? -eq 0 ]]; then
    ret="${find_comm_ret}"
  else
    echo "${find_comm_ret}"
    return $?
  fi    
}
  
trap 'cd "$START_DIR"' EXIT

export -f print_BLUE

check_ext
find_comm _COMM_TOP_SRCDIR
if [[ $? -ne 0 ]]; then
  exit $?
fi
cd "${_COMM_TOP_SRCDIR}"
check_status
do_pull "$1"
do_upstream_rev
exit 0
